<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on stanley的博客</title>
    <link>https://stanleylfc.github.io/tags/python/</link>
    <description>Recent content in python on stanley的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Apr 2020 15:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://stanleylfc.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>python 实战（五）| 迭代器</title>
      <link>https://stanleylfc.github.io/post/%E7%BC%96%E7%A8%8B/python/2020-04-05-python-base05/</link>
      <pubDate>Tue, 14 Apr 2020 15:00:00 +0800</pubDate>
      
      <guid>https://stanleylfc.github.io/post/%E7%BC%96%E7%A8%8B/python/2020-04-05-python-base05/</guid>
      <description>1.迭代器 1.1 迭代是指重复对象中获取数据，直至结束。 1.2 迭代协议 用__iter__方法返回一个实现了__next__方法的迭代对象，__next__抛出StopIteration 异常表示结束 1.3 自定义类型 class Data: def __init__(self, n): self.data = list(range(n)) def __iter__(self): return DataIter(self.data) #每次新建一个 class DataIter: def __init__(self, data): self.data = data self.index = 0 # 无法通过__next</description>
    </item>
    
    <item>
      <title>python 实战（四）| 基础知识02</title>
      <link>https://stanleylfc.github.io/post/%E7%BC%96%E7%A8%8B/python/2020-04-03-python-base02/</link>
      <pubDate>Fri, 03 Apr 2020 09:00:00 +0800</pubDate>
      
      <guid>https://stanleylfc.github.io/post/%E7%BC%96%E7%A8%8B/python/2020-04-03-python-base02/</guid>
      <description>模块 1.简单模块化 把函数、类、常量拆分到不同的文件，把它们放在同一个文件夹 把函数、类、常量拆分到不同的文件，把它们放在不同的文件 sys.path.append(&amp;quot;..&amp;quot;) # 通过这种方式调用上层目录 2.项目模块化 3.神奇的 if name == &amp;lsquo;main&amp;rsquo; import 在导入文件的时候，会自动把所有暴露在外面的代码全都执行一遍。因此，如果你要把一个东西封装成</description>
    </item>
    
    <item>
      <title>python 实战（四）| 基础知识01</title>
      <link>https://stanleylfc.github.io/post/%E7%BC%96%E7%A8%8B/python/2020-04-02-python-base01/</link>
      <pubDate>Thu, 02 Apr 2020 09:00:00 +0800</pubDate>
      
      <guid>https://stanleylfc.github.io/post/%E7%BC%96%E7%A8%8B/python/2020-04-02-python-base01/</guid>
      <description>数据类型 1.1数字（int, float, bool) int 底层实现上， 通过不定长结构体按需分配内存 2.数字还可以有二进制(bin)，八进制(oct)，以及十六进制(hex)表示0b110011, 0o12, 0x64 3.内置函数将整数转换为指定进制字符串，或反向int 还原 bin(100) &amp;lsquo;0b1100100&amp;rsquo; int(&amp;lsquo;0b1100100&amp;rsquo;, 2) 100 4.python3不支持数字和非数字类型</description>
    </item>
    
    <item>
      <title>python 实战（三）| python 用docker安装</title>
      <link>https://stanleylfc.github.io/post/%E7%BC%96%E7%A8%8B/python/2020-04-02-python-docker/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>https://stanleylfc.github.io/post/%E7%BC%96%E7%A8%8B/python/2020-04-02-python-docker/</guid>
      <description>基础环境 - Linux - Python 3.8 - Docker 1. 容器 docker $ docker pull ubuntu $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE ubuntu latest 4e5021d210f6 13 days ago 64.2MB 创建容器 $ docker create -ti --privileged --name py3 -p 10000:80 -p 10001:8888 -v /mac/py3:/root/py3 -w /root ubuntu bash -l 启动 $ docker start -ai py3 Docker 后台运行的快捷键是：Ctrl P + Ctrl Q 安装 更新源，安装 Python 3.8 $ apt update $ apt install curl $ apt install python3.8 python3.8-distutils 安装 pip 包管理器 $ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py $ python3.8 get-pip.py $ pip3 -V pip 20.0.2 from /usr/local/lib/python3.8/dist-packages/pip (python 3.8) 安装附加工具 $ pip3 install ipython ipdb</description>
    </item>
    
    <item>
      <title>python 实战（二）| virtualenv</title>
      <link>https://stanleylfc.github.io/post/%E7%BC%96%E7%A8%8B/python/2020-04-01-python-venv/</link>
      <pubDate>Wed, 01 Apr 2020 21:00:00 +0800</pubDate>
      
      <guid>https://stanleylfc.github.io/post/%E7%BC%96%E7%A8%8B/python/2020-04-01-python-venv/</guid>
      <description>1.安装virtualenv pip install virtualenv #(python2) pip3 install virtualenv #(python3) 2.创建venv python3 -m venv venv venv就是虚拟环境的文件夹，通常取名venv(用户自定义)。 --no-site-packages表示不添加系统里面python已安装的第三方库 3.启动虚拟环境并安装第三方库 venv\Script\activate #(windows) source venv/bin/activate #(linux/macos) pip install xxx 4.部署到服务器，环境</description>
    </item>
    
  </channel>
</rss>